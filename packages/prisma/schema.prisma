generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                  String               @id @default(cuid())
  name                String
  iconUrl             String?              @map("icon_url")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  approvals           ActionApproval[]
  agents              Agent[]
  contacts            Contact[]
  conversations       Conversation[]
  crmChatsappaiTokens CRMChatsappaiToken[]
  appDatasources      AppDatasource[]
  datastores          Datastore[]
  forms               Form[]
  leads               Lead[]
  mailInboxes         MailInbox[]
  memberships         Membership[]
  onboarding_info     onboarding_info[]
  serviceProviders    ServiceProvider[]
  sessions            Session[]
  subscriptions       Subscription[]
  usage               Usage?
  apiKeys             UserApiKey[]
  visitors            Visitor[]

  @@map("organizations")
}

model Membership {
  id                    String         @id @default(cuid())
  role                  MembershipRole
  organizationId        String         @map("organization_id")
  userId                String?
  invitedName           String?        @map("invited_name")
  invitedEmail          String?        @map("invited_email")
  invitedToken          String?        @map("invited_token")
  createdAt             DateTime?      @default(now()) @map("created_at")
  updatedAt             DateTime?      @updatedAt @map("updated_at")
  organization          Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                  User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedConversations Conversation[] @relation("assignees")

  @@unique([organizationId, invitedEmail])
  @@unique([organizationId, userId])
  @@map("memberships")
}

model User {
  id                      String            @id @default(cuid())
  name                    String?
  email                   String?           @unique
  emailVerified           DateTime?         @map("email_verified")
  image                   String?
  picture                 String?
  hasOptInEmail           Boolean?          @default(false) @map("has_opt_in_email")
  createdAt               DateTime          @default(now()) @map("created_at")
  updatedAt               DateTime          @updatedAt @map("updated_at")
  customPicture           String?           @map("custom_picture")
  role                    GlobalRole        @default(CUSTOMER)
  viaProduct              String?           @default("chatsappai") @map("via_product")
  onboardingStatus        OnboardingStatus  @default(NOT_STARTED)
  onboarding_completed_at DateTime?
  accounts                Account[]
  agents                  Agent[]
  conversations           Conversation[]
  datasources             AppDatasource[]
  datastores              Datastore[]
  memberships             Membership[]
  messages                Message[]
  onboarding_info         onboarding_info?
  serviceProviders        ServiceProvider[]
  sessions                Session[]
  subscriptions           Subscription?     @relation("user")
  usage                   Usage?
  apiKeys                 UserApiKey[]
  joinedConversations     Conversation[]    @relation("participants")
  joinedConversationsV2   Conversation[]    @relation("participants_users")

  @@map("users")
}

model Usage {
  id                               String        @id @default(cuid())
  userId                           String?       @unique @map("user_id")
  organizationId                   String?       @unique @map("organization_id")
  nbAgentQueries                   Int           @default(0) @map("nb_agent_queries")
  nbDatastoreQueries               Int           @default(0) @map("nb_datastore_queries")
  nbUploadedBytes                  Int           @default(0) @map("nb_uploaded_bytes")
  nbDataProcessingBytes            Int           @default(0) @map("nb_data_processing_bytes")
  nbModelTokens                    Int           @default(0) @map("nb_tokens")
  nbStoredTokens                   Int           @default(0) @map("nb_stored_tokens")
  notifiedAgentQueriesLimitReached Boolean?      @default(false) @map("notified_nb_agent_queries_limit_reached")
  notifiedStoredTokenLimitReached  Boolean?      @default(false) @map("notified_nb_stored_tokens_limit_reached")
  organization                     Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                             User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usages")
}

model Datastore {
  id                         String              @id @default(cuid())
  name                       String
  description                String?
  type                       DatastoreType
  visibility                 DatastoreVisibility @default(private)
  config                     Json?
  ownerId                    String?             @map("owner_id")
  createdAt                  DateTime            @default(now()) @map("created_at")
  updatedAt                  DateTime            @default(now()) @updatedAt @map("updated_at")
  organizationId             String?             @map("organization_id")
  pluginDescriptionForHumans String?             @map("plugin_description_for_humans")
  pluginDescriptionForModel  String?             @map("plugin_description_for_model")
  pluginIconUrl              String?             @map("plugin_icon_url")
  pluginName                 String?             @map("plugin_name")
  datasources                AppDatasource[]
  organization               Organization?       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner                      User?               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  apiKeys                    DatastoreApiKey[]
  forms                      Form[]
  messagesBNP                MessageBNP[]
  tool                       Tool[]

  @@map("data_stores")
}

model AppDatasource {
  id                String           @id @default(cuid())
  type              DatasourceType
  name              String
  status            DatasourceStatus @default(unsynched)
  config            Json?
  datastoreId       String?          @map("datastore_id")
  ownerId           String?          @map("owner_id")
  nbChunks          Int?             @default(0) @map("nb_chunks")
  textSize          Int?             @default(0) @map("text_size")
  hash              String?
  nbSynch           Int?             @default(0) @map("nb_synch")
  lastSynch         DateTime?        @map("last_synch")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @default(now()) @updatedAt @map("updated_at")
  groupId           String?          @map("group_id")
  nbTokens          Int?             @default(0) @map("nb_tokens")
  organizationId    String?          @map("organization_id")
  serviceProviderId String?          @map("service_provider_id")
  datastore         Datastore?       @relation(fields: [datastoreId], references: [id], onDelete: Cascade)
  group             AppDatasource?   @relation("group", fields: [groupId], references: [id], onDelete: Cascade)
  children          AppDatasource[]  @relation("group")
  organization      Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner             User?            @relation(fields: [ownerId], references: [id])
  serviceProvider   ServiceProvider? @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)

  @@map("data_sources")
}

model UserApiKey {
  id             String        @id @default(cuid())
  key            String        @unique
  userId         String?       @map("user_id")
  organizationId String?       @map("organization_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_api_keys")
}

model DatastoreApiKey {
  id                   String                @id @default(cuid())
  key                  String                @unique
  datastoreId          String?               @map("datastore_id")
  createdAt            DateTime              @default(now()) @map("created_at")
  datastore            Datastore?            @relation(fields: [datastoreId], references: [id], onDelete: Cascade)
  externalIntegrations ExternalIntegration[]

  @@map("datastore_api_keys")
}

model Agent {
  id                       String                @id @default(cuid())
  hidden                   Boolean               @default(false)
  name                     String
  description              String
  userPrompt               String?               @map("user_prompt")
  systemPrompt             String?               @map("system_prompt")
  prompt                   String?
  promptType               PromptType            @default(customer_support) @map("prompt_type")
  iconUrl                  String?               @map("icon_url")
  temperature              Float                 @default(0.0)
  modelName                AgentModelName        @default(gpt_4o) @map("model_name")
  includeSources           Boolean?              @default(true) @map("include_sources")
  restrictKnowledge        Boolean?              @default(true) @map("restrict_knowledge")
  useMarkdown              Boolean?              @default(true) @map("use_markdown")
  useLanguageDetection     Boolean?              @default(true) @map("use_language_detection")
  visibility               AgentVisibility       @default(private)
  ownerId                  String?               @map("owner_id")
  organizationId           String?               @map("organization_id")
  nbQueries                Int?                  @default(0) @map("nb_queries")
  interfaceConfig          Json?                 @map("interface_config")
  handle                   String?               @unique @map("handle")
  formId                   String?               @unique @map("form_id")
  createdAt                DateTime              @default(now()) @map("created_at")
  updatedAt                DateTime              @default(now()) @updatedAt @map("updated_at")
  useConversationalMode    Boolean?              @default(false) @map("use_conversational_mode")
  conversationalModePrompt String?               @map("conversational_mode_prompt")
  useContextDataAgents     Boolean?              @default(true) @map("use_context_data_agents")
  timeBetweenMessages      Int?                  @default(0) @map("time_between_messages")
  approvals                ActionApproval[]
  form                     Form?                 @relation(fields: [formId], references: [id], onDelete: Cascade)
  organization             Organization?         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner                    User?                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  contacts                 Contact[]
  conversations            Conversation[]
  domains                  Domain[]
  externalIntegration      ExternalIntegration[]
  leads                    Lead[]
  messages                 Message[]
  tools                    Tool[]
  serviceProviders         ServiceProvider[]     @relation("AgentToServiceProvider")
  joinedConversations      Conversation[]        @relation("participants_agents")
  composioConfig           Json?

  @@map("agents")
}

model ActionApproval {
  id             String        @id @default(cuid())
  payload        Json?
  toolId         String?       @map("tool_id")
  messageId      String?       @map("message_id")
  agentId        String?       @map("agent_id")
  organizationId String?       @map("organization_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at")
  agent          Agent?        @relation(fields: [agentId], references: [id], onDelete: Cascade)
  message        Message?      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tool           Tool?         @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@map("action_approvals")
}

model Domain {
  id        String   @id @default(cuid())
  name      String   @unique
  agentId   String   @map("agent_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("domains")
}

model Conversation {
  id                   String               @id @default(cuid())
  title                String?
  isAiEnabled          Boolean?             @default(true) @map("is_ai_enabled")
  channel              ConversationChannel  @default(dashboard)
  status               ConversationStatus   @default(UNRESOLVED)
  metadata             Json?
  channelExternalId    String?              @unique @map("channel_external_id")
  channelCredentialsId String?              @map("channel_credentials_id")
  organizationId       String?              @map("organization_id")
  mailInboxId          String?              @map("mail_inbox_id")
  priority             ConversationPriority @default(MEDIUM)
  formId               String?              @map("form_id")
  agentId              String?              @map("agent_id")
  userId               String?              @map("user_id")
  visitorId            String?              @map("visitor_id")
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @default(now()) @updatedAt @map("updated_at")
  attachments          Attachment[]
  agent                Agent?               @relation(fields: [agentId], references: [id])
  channelCredentials   ServiceProvider?     @relation(fields: [channelCredentialsId], references: [id])
  form                 Form?                @relation(fields: [formId], references: [id], onDelete: Cascade)
  mailInbox            MailInbox?           @relation(fields: [mailInboxId], references: [id])
  organization         Organization?        @relation(fields: [organizationId], references: [id])
  user                 User?                @relation(fields: [userId], references: [id])
  formSubmissions      FormSubmission[]
  lead                 Lead?
  messages             Message[]
  contacts             Contact[]            @relation("ContactToConversation")
  assignees            Membership[]         @relation("assignees")
  participants         User[]               @relation("participants")
  participantsAgents   Agent[]              @relation("participants_agents")
  participantsContacts Contact[]            @relation("participants_contacts")
  participantsUsers    User[]               @relation("participants_users")
  participantsVisitors Visitor[]            @relation("participants_visitors")

  @@index([visitorId], type: Hash)
  @@map("conversations")
}

model Message {
  id             String           @id @default(cuid())
  text           String
  html           String?
  from           MessageFrom
  conversationId String?          @map("conversation_id")
  sources        Json?
  usage          Json?
  externalId     String?          @unique @map("external_id")
  userId         String?          @map("user_id")
  contactId      String?          @map("contact_id")
  visitorId      String?          @map("visitor_id")
  agentId        String?          @map("agent_id")
  metadata       Json?
  inputId        String?          @map("input_id")
  eval           MessageEval?
  read           Boolean?         @default(false)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")
  approvals      ActionApproval[]
  attachments    Attachment[]
  submission     FormSubmission?
  agent          Agent?           @relation(fields: [agentId], references: [id])
  contact        Contact?         @relation(fields: [contactId], references: [id])
  conversation   Conversation?    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  input          Message?         @relation("input", fields: [inputId], references: [id])
  outputs        Message[]        @relation("input")
  user           User?            @relation(fields: [userId], references: [id])
  visitor        Visitor?         @relation(fields: [visitorId], references: [id])

  @@map("messages")
}

model Tool {
  id                String           @id @default(cuid())
  type              ToolType
  agentId           String?          @map("agent_id")
  datastoreId       String?          @map("datastore_id")
  formId            String?          @map("form_id")
  config            Json?
  serviceProviderId String?          @map("service_provider_id")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @default(now()) @updatedAt @map("updated_at")
  approvals         ActionApproval[]
  agent             Agent?           @relation(fields: [agentId], references: [id], onDelete: Cascade)
  datastore         Datastore?       @relation(fields: [datastoreId], references: [id], onDelete: Cascade)
  form              Form?            @relation(fields: [formId], references: [id], onDelete: Cascade)
  serviceProvider   ServiceProvider? @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)

  @@map("tools")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  ext_expires_in    Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id             String        @id @default(cuid())
  sessionToken   String        @unique
  userId         String
  expires        DateTime
  organizationId String?       @map("organization_id")
  organization   Organization? @relation(fields: [organizationId], references: [id])
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ExternalIntegration {
  id               String           @id @default(cuid())
  type             IntegrationType
  integrationId    String           @unique @map("integration_id")
  integrationToken String?          @map("integration_token")
  agentId          String?          @map("agent_id")
  apiKeyId         String?          @map("api_key_id")
  metadata         Json?
  agent            Agent?           @relation(fields: [agentId], references: [id])
  apiKey           DatastoreApiKey? @relation(fields: [apiKeyId], references: [id])

  @@map("external_integrations")
}

model Product {
  id          String   @id @default(cuid())
  active      Boolean  @default(false)
  name        String
  description String?
  image       String?
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  prices      Price[]

  @@map("products")
}

model Price {
  id                String         @id @default(cuid())
  productId         String         @map("product_id")
  active            Boolean        @default(false)
  currency          String
  interval          PriceInterval?
  unitAmount        Int?           @map("unit_amount")
  interval_count    Int?
  trial_period_days Int?
  type              PriceType?
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  product           Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscriptions     Subscription[]

  @@map("prices")
}

model Subscription {
  id                   String             @id @default(cuid())
  plan                 SubscriptionPlan?  @default(level_1)
  priceId              String
  customerId           String             @map("customer_id")
  status               SubscriptionStatus
  start_date           DateTime?
  ended_at             DateTime?
  trial_end            DateTime?
  trial_start          DateTime?
  cancel_at            DateTime?
  cancel_at_period_end Boolean?
  canceled_at          DateTime?
  metadata             Json?
  coupon               String?
  userId               String?            @unique @map("user_id")
  organizationId       String?            @map("organization_id")
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")
  organization         Organization?      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  price                Price              @relation(fields: [priceId], references: [id])
  user                 User?              @relation("user", fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model ServiceProvider {
  id             String              @id @default(cuid())
  type           ServiceProviderType
  name           String?
  refreshToken   String?             @map("refresh_token")
  accessToken    String?             @map("access_token")
  externalId     String?             @map("external_id")
  config         Json?
  ownerId        String?             @map("user_id")
  organizationId String?             @map("organization_id")
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")
  conversations  Conversation[]
  appDatasources AppDatasource[]
  organization   Organization?       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          User?               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tools          Tool[]
  agents         Agent[]             @relation("AgentToServiceProvider")

  @@unique([type, externalId], name: "unique_external_id")
  @@map("service_providers")
}

model MessageBNP {
  id          String      @id @default(cuid())
  text        String
  from        MessageFrom
  userName    String?     @map("user_name")
  datastoreId String?     @map("datastore_id")
  read        Boolean?    @default(false)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at")
  datastore   Datastore?  @relation(fields: [datastoreId], references: [id], onDelete: Cascade)

  @@map("messages_bnp")
}

model Lead {
  id             String        @id @default(cuid())
  email          String?
  firstName      String?       @map("first_name")
  lastName       String?       @map("last_name")
  phoneNumber    String?       @map("phone_number")
  organizationId String?       @map("organization_id")
  agentId        String?       @map("agent_id")
  conversationId String?       @unique @map("conversation_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  agent          Agent?        @relation(fields: [agentId], references: [id], onDelete: Cascade)
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("leads")
}

model Form {
  id              String           @id @default(cuid())
  name            String
  type            FormType         @default(traditional)
  draftConfig     Json?
  publishedConfig Json?
  organizationId  String?          @map("organization_id")
  datastoreId     String?          @map("datastore_id")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at")
  agent           Agent?
  conversations   Conversation[]
  submissions     FormSubmission[]
  datastore       Datastore?       @relation(fields: [datastoreId], references: [id], onDelete: Cascade)
  organization    Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tool            Tool[]

  @@map("forms")
}

model FormSubmission {
  id             String        @id @default(cuid())
  status         FormStatus    @default(IN_PROGRESS)
  data           Json?
  formId         String?       @map("form_id")
  conversationId String?       @map("conversation_id")
  messageId      String?       @unique @map("message_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  form           Form?         @relation(fields: [formId], references: [id], onDelete: Cascade)
  message        Message?      @relation(fields: [messageId], references: [id])

  @@map("form_submissions")
}

model XPBNPEval {
  id             String   @id @default(cuid())
  active         Boolean  @default(false)
  userName       String?  @map("user_name")
  feature        String?
  usecase        String?
  promptType     String?  @map("prompt_type")
  datasourceName String?  @map("datasource_name")
  datastoreName  String?  @map("datastore_name")
  prompt         String?
  comment        String?
  result         String?
  score1         Int?     @map("score_1")
  score2         Int?     @map("score_2")
  score3         Int?     @map("score_3")
  metadata       Json?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("xp_bnp_evals")
}

model LLMTaskOutput {
  id         String            @id @default(cuid())
  type       LLMTaskOutputType
  externalId String?           @map("external_id")
  output     Json?
  usage      Json?
  createdAt  DateTime          @default(now()) @map("created_at")

  @@unique([type, externalId], name: "unique_external_id")
  @@map("llm_task_outputs")
}

model MailInbox {
  id                             String            @id @default(cuid())
  name                           String
  description                    String?
  alias                          String            @unique
  fromName                       String?           @map("from_name")
  signature                      String?           @map("signature")
  showBranding                   Boolean?          @default(true) @map("show_branding")
  customEmail                    String?           @map("custom_email")
  isCustomEmailVerified          Boolean?          @default(false) @map("is_custom_email_verified")
  organizationId                 String?           @map("organization_id")
  customEmailVerificationTokenId String?           @unique @map("custom_email_verification_token_id")
  createdAt                      DateTime          @default(now()) @map("created_at")
  updatedAt                      DateTime          @updatedAt @map("updated_at")
  conversations                  Conversation[]
  customEmailVerificationToken   VerificationCode? @relation(fields: [customEmailVerificationTokenId], references: [code])
  organization                   Organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("mail_inboxes")
}

model Attachment {
  id             String        @id @default(cuid())
  name           String
  url            String
  size           Int
  mimeType       String        @map("mime_type")
  messageId      String        @map("message_id")
  conversationId String?       @map("conversation_id")
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  message        Message       @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Contact {
  id              String         @id @default(cuid())
  email           String?
  phoneNumber     String?        @map("phone_number")
  externalId      String?        @map("external_id")
  instagramId     String?        @map("instagram_id")
  firstName       String?        @map("first_name")
  lastName        String?        @map("last_name")
  organizationId  String?        @map("organization_id")
  agentId         String?        @map("agent_id")
  metadata        Json?
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  agent           Agent?         @relation(fields: [agentId], references: [id])
  organization    Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  messages        Message[]
  visitors        Visitor[]
  conversations   Conversation[] @relation("ContactToConversation")
  conversationsV2 Conversation[] @relation("participants_contacts")

  @@unique([email, organizationId], name: "unique_email_for_org")
  @@unique([phoneNumber, organizationId], name: "unique_phone_number_for_org")
  @@unique([externalId, organizationId], name: "unique_external_id_for_org")
  @@map("contacts")
}

model Visitor {
  id             String         @id @default(cuid())
  contactId      String?        @map("contact_id")
  metadata       Json?
  organizationId String?        @map("organization_id")
  externalId     String?        @map("external_id")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  messages       Message[]
  contact        Contact?       @relation(fields: [contactId], references: [id])
  organization   Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  conversations  Conversation[] @relation("participants_visitors")

  @@unique([externalId, organizationId], name: "unique_external_id_for_org")
  @@map("visitors")
}

model VerificationCode {
  code        String     @id @default(cuid())
  mailInboxId String?    @map("maiL_inbox_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  mailInbox   MailInbox?

  @@map("verification_codes")
}

model CRMChatsappaiToken {
  id             String       @id @default(cuid())
  organizationId String       @map("organization_id")
  token          String       @unique
  tokenAgentBot  String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("crm_chatsappai_tokens")
}

model onboarding_info {
  id                    String           @id
  companyName           String
  companySize           CompanySize
  industry              String
  websiteUrl            String?
  companyLocation       String[]
  primaryUseCase        String
  expectedVolume        Int?
  requiredLanguages     String[]
  communicationChannels String[]
  acquisitionSource     String?
  currentTools          String?
  user_id               String           @unique
  organization_id       String
  status                OnboardingStatus @default(IN_PROGRESS)
  completedSteps        String[]
  created_at            DateTime         @default(now())
  updated_at            DateTime
  organizations         Organization     @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users                 User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum LLMTaskOutputType {
  youtube_summary
  web_page_summary
}

enum DatastoreVisibility {
  public
  private
}

enum AgentVisibility {
  public
  private
}

enum DatasourceStatus {
  unsynched
  pending
  running
  synched
  error
  usage_limit_reached
}

enum DatasourceType {
  web_page
  web_site
  text
  file
  google_drive_file
  google_drive_folder
  notion
  notion_page
  qa
  youtube_video
  youtube_bulk
}

enum ServiceProviderType {
  website
  wordpress
  google_drive
  notion
  crisp
  slack
  zendesk
  whatsapp
  telegram
  meta
  mercadolibre
}

enum DatastoreType {
  pinecone
  qdrant
}

enum ToolType {
  datastore
  form
  connector
  agent
  http
  mark_as_resolved
  request_human
  lead_capture
  app
}

enum SubscriptionPlan {
  level_0
  level_0_5
  level_1
  level_2
  level_3
  level_4
}

enum IntegrationType {
  website
  crisp
  slack
}

enum PriceType {
  recurring
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}

enum PriceInterval {
  day
  month
  week
  year
}

enum PromptType {
  raw
  customer_support
}

enum MessageFrom {
  agent
  human
}

enum ConversationChannel {
  dashboard
  website
  slack
  crisp
  zapier
  api
  form
  mail
  whatsapp
  telegram
  meta
  mercadolibre
}

enum FormType {
  conversational
  traditional
}

enum AgentModelName {
  gpt_3_5_turbo
  gpt_3_5_turbo_16k
  gpt_4
  gpt_4_32k
  gpt_4_turbo
  gpt_4_turbo_vision
  gpt_4o
  gpt_4o_mini
  claude_3_haiku
  claude_3_sonnet
  claude_3_opus
  mixtral_8x7b
  mixtral_8x22b
  dolphin_mixtral_8x7b
  gpt_o1_mini
  gpt_o1
  deepseek_r1
  claude_3_5_sonnet
  claude_3_5_v2_sonnet
  claude_3_5_v2_haiku
  mixtral_small
  mixtral_large
  command_r_plus
  llama_3_1_70b
  llama_3_2_11b
  llama_3_2_90b
  llama_3_2_1b
  llama_3_2_3b
  llama_3_8b
  llama_3_3_70b
  llama_3_1_8b_instant
  deepseek_v3
  gpt_o3_mini
  gemini_1_5_flash
  gemini_2_0_flash
  gemini_2_0_flash_thinking
  gemini_2_0_flash_thinking_app
}

enum MessageEval {
  good
  bad
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

enum ConversationStatus {
  RESOLVED
  UNRESOLVED
  HUMAN_REQUESTED
}

enum FormStatus {
  COMPLETED
  IN_PROGRESS
  ABANDONED
}

enum ConversationPriority {
  LOW
  MEDIUM
  HIGH
}

enum CompanySize {
  ONLY
  MICRO
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum OnboardingStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_PAYMENT
  COMPLETED
}
